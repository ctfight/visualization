#include "showexploitrun.h"
#include <iostream>
#include <QString>
#include <QFontMetrics>
#include <QFontDatabase>
#include <QPainter>
#include <cmath>
#include <QTime>
#include <QThread>
#include <QFile>

CommandShowExploitRun::CommandShowExploitRun(){
	m_sCheck = "";
	m_bCheck = true;
};

CommandShowExploitRun::~CommandShowExploitRun(){
};

bool CommandShowExploitRun::isMultiLine(){
	return false;
};

ICommand *CommandShowExploitRun::create(){
	return new CommandShowExploitRun();
};
	
QString CommandShowExploitRun::name(){
	return "showexploitrun";
};

/*
 * @command showexploterun
 * @author Evgenii Sopov
 * @usage showexploterun <team1> <team2> <ip1> <ip2> <flags> <success>
 * @example showexploterun team1 team2 10.0.145.12 10.0.142.1 5 false
 * @param team1 - requared, string
 * @param team2 - requared, string
 * @param ip1 - requared, string
 * @param ip2 - requared, string
 * @param width - requared, integer
 * @param success - requared, bool
 * */

void CommandShowExploitRun::setParams(QStringList list){
	m_listParams.clear();
	m_listParams << list;
	m_sCheck = "";
	m_bCheck = true;
	QString sUsage = " Usage: 'showexploterun <team1> <team2> <ip1> <ip2> <flags> <success>'"; 
	if(m_listParams.size() != 6){
		m_sCheck = "Expected 6 params. " + sUsage;
		m_bCheck = false;
		return;
	}
	m_sTeam1 = m_listParams[0];
	m_sTeam2 = m_listParams[1];
	m_sIP1 = m_listParams[2];
	m_sIP2 = m_listParams[3];

	bool bConvert = false;
	m_nFlags = m_listParams[4].toInt(&bConvert,10);
	if(!bConvert){
		m_sCheck = "Parameter flags must be integer. " + sUsage;
		m_bCheck = false;
		return;
	}

	QString sSuccess = m_listParams[5].toUpper();
	if(sSuccess != "TRUE" && sSuccess != "FALSE"){
		m_sCheck = "Parameter success must be bool: true or false. " + sUsage;
		m_bCheck = false;
		return;
	}
	m_bSuccess = sSuccess == "TRUE";
};

bool CommandShowExploitRun::check(){
	return m_bCheck;
};

bool CommandShowExploitRun::check(QString &strCheck){
	strCheck = m_sCheck;
	return m_bCheck;
};

QString CommandShowExploitRun::code(){
	return name() + " " + m_listParams.join(" ");
}

void CommandShowExploitRun::appendCode(QString){
	// this command is single line
};

void CommandShowExploitRun::printText(QImage *pBaseFrame, QFont font, int x,int y,QString text){
	QPainter p(pBaseFrame);
	p.setPen(QPen(QColor(0x00C8C8C8)));
	p.setFont(font);
	p.drawText(x, y, text);	
	p.end();
};

void CommandShowExploitRun::copy(QImage *pBaseFrame, QImage *pFrame){
	QPainter p(pFrame);
	p.drawImage(QPoint(0, 0), *pBaseFrame);
	p.end();
}

// special simbols: http://www.utf8-chartable.de/unicode-utf8-table.pl?start=9728

void CommandShowExploitRun::run(ICore *pCore){
	if(!m_bCheck) return;
	int nWidth = pCore->width();
	int nHeight = pCore->height();
	QImage *pBaseFrame = new QImage(QSize(nWidth,nHeight), QImage::Format_RGB32);
	pBaseFrame->fill(QColor(0x303030));

	int id = QFontDatabase::addApplicationFont(":/fonts/hack.regular.ttf");
	QString family = QFontDatabase::applicationFontFamilies(id).at(0);

	int nX = 0;
	int nY = 0;

	// create title
	{
		QFont font(family, 40);
		QFontMetrics fm(font);
		QString text = "☢ Wow! " + m_sTeam2 + " attacked by " + m_sTeam1;
		int nTextWidth = fm.width(text);
		int nTextHeight = fm.height();
		QPainter p(pBaseFrame);
		p.setPen(QPen(QColor(0x00C8C8C8)));
		p.setFont(font);
		nX = nWidth/2-nTextWidth/2;
		nY = 30 + nTextHeight;
		p.drawText(nX, nY, text);	
		p.end();
		nY += 30;
	}

	// paste logo
	QFile logoTeam(":/images/teams/" + m_sTeam1 + ".png");
	if(logoTeam.exists()){
		QImage imgLogo(":/images/teams/" + m_sTeam1 + ".png");
		QPainter p1(pBaseFrame);
		p1.drawImage(QPoint(nWidth - 20 - imgLogo.width(), nHeight - 20 - imgLogo.height()), imgLogo);
		p1.end();
	}else{
		pCore->logger()->debug("Logo for " + m_sTeam1 + " are not exists");
	}

	// add frame
	copy(pBaseFrame, pCore->createFrame());
	nX = 50;
	QFont font(family, 28);
	QFontMetrics fm(font);
	int nTextHeight = fm.height();
	int nPadding = 0;
	QString text = m_sTeam1 + "@" + m_sIP1 + ":~$ ";
	nY += nPadding + nTextHeight;
	printText(pBaseFrame, font, nX, nY,text);
	
	for(int i = 0; i < pCore->framerate(); i++)
		copy(pBaseFrame, pCore->createFrame());
		
	QString sAppend = "./exploit.py " + m_sIP2 + " " + m_sTeam2;
	for(int i = 0; i< sAppend.length(); i++ ){
		text += sAppend[i];
		printText(pBaseFrame, font, nX, nY,text);
		copy(pBaseFrame, pCore->createFrame());
	}
	nY += nPadding + nTextHeight;
	printText(pBaseFrame, font, nX, nY,"");
	nY += nPadding + nTextHeight;
	printText(pBaseFrame, font, nX, nY,"☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠");
	nY += nPadding + nTextHeight;
	printText(pBaseFrame, font, nX, nY,"");
	nY += nPadding + nTextHeight;
	
	text = "⚠ Searching vulnerability ";
	printText(pBaseFrame, font, nX, nY,text);
	copy(pBaseFrame, pCore->createFrame());
	sAppend = ".........";
	for(int i = 0; i< sAppend.length(); i++ ){
		text += sAppend[i];
		printText(pBaseFrame, font, nX, nY,text);
		copy(pBaseFrame, pCore->createFrame());
	}
	text += " [OK]";
	printText(pBaseFrame, font, nX, nY,text);
	copy(pBaseFrame, pCore->createFrame());

	nY += nPadding + nTextHeight;
	text = "♼ Loading exploit to server ";
	sAppend = ".......";
	for(int i = 0; i< sAppend.length(); i++ ){
		text += sAppend[i];
		printText(pBaseFrame, font, nX, nY,text);
		copy(pBaseFrame, pCore->createFrame());
	}
	text += " [OK]";
	printText(pBaseFrame, font, nX, nY,text);
	copy(pBaseFrame, pCore->createFrame());
	
	nY += nPadding + nTextHeight;
	text = "⚐ Flags taken away ";
	sAppend = "................";
	for(int i = 0; i< sAppend.length(); i++ ){
		text += sAppend[i];
		printText(pBaseFrame, font, nX, nY,text);
		copy(pBaseFrame, pCore->createFrame());
	}
	text += " [" + QString::number(m_nFlags) + "]";
	printText(pBaseFrame, font, nX, nY,text);
	copy(pBaseFrame, pCore->createFrame());
	
	nY += nPadding + nTextHeight;
	
	if(m_bSuccess){	
		nY += nPadding + nTextHeight;
		printText(pBaseFrame, font, nX, nY,"☺ Congratulation!");
		copy(pBaseFrame, pCore->createFrame());
		
		nY += nPadding + nTextHeight;
		printText(pBaseFrame, font, nX, nY,"☺ Succsessful attack!");
		copy(pBaseFrame, pCore->createFrame());
		
		nY += nPadding + nTextHeight;
		printText(pBaseFrame, font, nX, nY,"☺ Your are cool hacker!");
		copy(pBaseFrame, pCore->createFrame());
	} else {
		nY += nPadding + nTextHeight;
		printText(pBaseFrame, font, nX, nY,"☹ Oops! The FBI will soon come for you!");
		copy(pBaseFrame, pCore->createFrame());
		
		nY += nPadding + nTextHeight;
		printText(pBaseFrame, font, nX, nY,"☹ Failed attack.");
		copy(pBaseFrame, pCore->createFrame());
		
		nY += nPadding + nTextHeight;
		printText(pBaseFrame, font, nX, nY,"☹ Maybe another time lucky.");
		copy(pBaseFrame, pCore->createFrame());
	}
	pCore->pushFrames();
};

